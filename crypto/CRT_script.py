
# openssl rsa -modulus -in keyfile -pubin -noout

e = 3

m2 = 0xD21055555F52258B9EE41E0B81117A0D51B5B3BFB38763D84550755529A6CA590FCE2FCC2C28BBB463465A79F0CB2485D41201496B64444B7EC8674929AB4E38FFA994D1D0FC4DC11123D53B3BAB27CE1B34D38FD885B21CF7BE101FFC217DA78051C38B33703E22F92C992E80C40DB2D09DA5857D36DE50FAA8F5FDBD1053410BFB3EF55A9B1495C624B5E4D5AA66BB718C7E96968788C06ED3D42D4DD0B2769CADFD624BE973F6F3AB5FE93674CCC4E444080CA63C70CE51CFFAD1F905AC178F48BE26F723D2E727A26A357C8197E9859C73ED6E54D8D807074DAAFBD6F062DF9D3337A71BCB52FA9F262791E75BA1DF7B03E2B0FE0B154199454221937291

m1 = 0xC0BB6E9E4E4963258304681FE7DB9F2136C7BE6B8E6F58BAAC747CCF51970BC501D2B6CB71E181DA71C23215874F04982939191BC37D54EF523A7E567E9AAEB512FA1D1C0B2148764F8D717BDE9FFB851089F2651BCD31034446DD6AEAB0B9F796DFB32DD666531BEB38EFCB6F6237DFE74862D376397D448FDAFB2001491B69B744511CBDAF3D8C10CD8F848D82ABA02E039FA3DECC5832C5E9CC1D3F0B4FBA464A439BA5822BBCF1246054ABF20A947E0675F9846973481263D5FEF9040740C1DBFA71CF4B331F4A023790A9D5E11713885000F23464567F0E87115E403242981CA601A02579E97C74063F997BD84479C00CC13F9D2C24446B89D285FFEF3D

m3 = 0xE7799D1199E650C707469BA5984D80D4E565B85D594C742BBD58F95DA1658D0D23D0B0E467174E289DF45AC392E32499D5849BA183419B6170FFFF1C6313B9D606B13218FAE2AD857C14FCC8E9298EC4F2F7B57E878405D4A5CFFABF3061F25453C98243CBD4E34D47B91C8B8BFB6EF77514F5F05AF50EA2568AE7FBE18DE12DB3D5DA4EA1E9DC3F2DE82B249E6F978E342B2C5DC6B68FFFAE8556752ECABD86E4EEDE4B731B64393DA10FFF39CF68AEDFC81F6C67F58DDC3DD842511E61085652D58C8D8903F92B812D2D5E9BB6A5F344DDDD9EA4951CA332D0B1FE2C7D7B9339CD762219F14B803085DDE1BDD62F8A2BD85519827BC885C0FB4F5F09C39A07

m = m1*m2*m3

# x1*(m/m1)+y1*m=a1
a1, x1, y1 = xgcd((m/m1), m1)

#a2*(m/m2)+b2*m=1
a2, x2, y2 = xgcd((m/m2), m2)

#a3*(m/m3)+b3*m=1
a3, x3, y3 = xgcd((m/m3), m3)


# xxd -p Zhang_Yong.bin | tr -d '\n'
#Li
c1 = 0x6951d9617fec91e812da86286769739e37e5a0c0552f5ff357492345270c577bfb3a286bb2efa3874df059ed4300b84c832f04f3912184bcb300fbede3082f598189ff0685081a76acda72cc204ee63898fb5e81461910f9d9fc885d160bb3b5bb46117a61f5205321a7fffa239973a93e4e96f4351cf16b0ff55facea6c32194fdcc63152882d7452d44ecf9c832a34b1b9fd32e07b0f240d3e7cfb393f3835d11e4c2416e39e71c52876c5677c8cc6ff67af1c337a93d9378440d5e4b94784d1b7f84415880d5702ac31e74ab300e1cfc6261d345c29fd4da5670efd546b8d9f49bb1aec8f56480ac46f89ad48e38db420975b5d4e70917ddac87b8948e510

# Wang
c2 = 0xbc9b9884f369cebe1a104aaacac1c97bd3f33917cad4927af2865edd3a113e520bc86e83524012e59e5239296dcc3474095386d26ed9f7ee2c91df6a0f0a6aaba3df567ad2c93a44d6123183840af7867bce113332aef763ee7dcfe2ca4f2e1881bfbc491f202f7797340822687eb284260817586ac4391a71edfb29dcced65d43ad7373a4bdded9cb306a8b92e22d087ad5eaee24e72fb3ff449d440505684d64bd30e82885512fc473b558a64db64a6a0ffa4a21c6a463a432e06c5519dfff66034849893c92e892f75753dcb989a2bbaca949b1f6b4383ffd0fb8e143f12bc308e95d2255289286db06d802e8e9e7428b430ed25280160dbb0111aa694a80

# Zhang
c3 = 0x4d3b3d5c918fd971a2cda73c18943975bbde610eed371e2d62b8425e5816ced080872956935d87c94e9c996d9e038b9613941111c29cf6e0908e59bdd79c5e110c6d9115524b11573a1d9f60bae5b35a055a6458b6b8d0c90b76ffa6150d161abb9b12a13ed17ec7e9f7e4fb92810eec3594e371bdb8c1f5cda029923e780e21a455cb4c4856b9e7dea291230eb27625a0e92ca73f8964ecb7fba09b8d9b4a378d70160fd2cac6d40a06d8e8b1d929ffc64ebec4d952ac46fe2bb56285d56e59bdf69dfd24087bc27ef2007674eca22ada432f83b4fe81c2bb7fc7fcccf100cefd193b6d2edb79322aa7fc7aba764e7fd211b511a8157b521746229a261b4de0

plain = (c1*x1*(m/m1) + c2*x2*(m/m2) + c3*x3*(m/m3)) % m
x = ZZ(plain**(1/3))

from Crypto.Util.number import long_to_bytes
print long_to_bytes(x)

'''Congrats, you cracked RSA! Choosing a small public exponent is bad, right? Flag: {FqgY2PmNg50oXxngj87gGiu7}'''



