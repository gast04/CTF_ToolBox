
import angr
import simuvex
import sys

def hookAssert(state):
    print "assert hook called"
    state.assert_failed = False 

def getFindFunction(pg, find_target):

    def findFunction(path):
        if not path.state.regs.eip.concrete:
            print "EIP is Symblic, maybe Bufferoverflow?.."
        else:

            # remove the errored paths from the active list
            #print pg.errored
            '''for err in pg.errored:
                try:
                    pg.active.remove(err)
                except:
                    pass
            '''
            #print "paths: {}".format(path.path_id)
            #for path in pg.active:
            #    print path.path_id
            try:
                if path.state.assert_failed == True:
                    print "add assert path to errored list"
                    #pg.errored.append(path)
                    path.errored = True
            except AttributeError:
                pass # happens cause assert_failed is generated by funi

            # check if we reached the find target
            eip = path.state.se.any_int(path.state.regs.eip)
            print "{}-{}".format(hex(eip), hex(find_target))
            if eip == find_target:
                print "find target found"
                pg.found.append(path)

    return findFunction

def find_func(path):
    print "find function called, {}".format(path.state.regs.eip)

    #if eip is concrete:
    eip = path.state.se.any_int(path.state.regs.eip)

    if eip == 0xC000020:
        print "FOUND -> End Path"

def getBasicBlock(proj, addr):
    cfg = proj.analyses.CFGFast()
    i = 0
    while(True):
        nodes = cfg.get_all_nodes(addr-i)
        if len(nodes) != 0:
            return addr-i
        i += 1

binary = "mycrack"
argv1 = angr.claripy.BVS("userinput", 6*8)

proj = angr.Project(binary)
init_state = proj.factory.entry_state(args=[binary, argv1])
pg = proj.factory.path_group(init_state)

print "pg: {}".format(pg)
find_target = 0x080484df
assert_list = [0x080484ba, 0x080484a7]

find_target = getBasicBlock(proj,find_target)

print "new find list:", hex(find_target)

proj.hook(0x08048477, hookAssert)

pg.explore(find=getFindFunction(pg, find_target))
print pg
